Section 7 : Forms

- Introduction
Login form, Register form, Add/Edit movies, Search box

- Building a Bootstrap form
 * Create loginForm.jsx
create LoginForm cc with h1
Add route in App.js for /login
In navBar.jsx add NavLink for Login
In bootstrap form, div.form-group groups label and corresponding input,
also input has form-control class
In loginForm
Wrap h1 with div
Create form as
form>(div.form-group>label+input.form-control)*2
remove action attribute
Set labels : Username, Password
Set for(htmlFor) and id attribute : username, password
Add primary Login button

- Handling Form Submission
* Preventing full page reload
Add onSubmit attribute to form
Create method handleSubmit with e argument
add statement e.preventDefault(); then do something
Set onSubmit to this method

- Refs
* In react we don't use document object directly
* Getting value of input field
in component define Refs object property username = React.createRef()
in input element set ref attribute to this.username
when sumbitting form const username = this.username.current.value
* current field of Refs object returns DOM element
* We don't use Refs for building forms.
* We use Refs for DOM libraries, animation etc.

- Controlled Elements
* Similar to Controlled component
* Add state property to LoginForm as
state = { account : {username: "", password: ""}}
* Removing state of input field / converting to controlled element
add value attribute to input with this.state.account.username
* Changing state on change events
add onChange attribute to input with this.handleChange
create method handleChange with args (e)
set typed value from e.currentTarget.value to username

- Handling Multiple Inputs
* Setting property dynamically
use bracket notation : account[input.name]
add name attribute to input with username value
* Do destructuring in handleChange as
(e) becomes ({currentTarget:input})

- Common errors
* if value attribute of element has value undefined/null,
then it becomes uncontrolled element
* Initialize variables used for value attribute at onset.

- Extracting a Reusable Input
* Create input.jsx in common folder
Using name, label, value, onChange

- Validation
* Add errors object property in state
if input fields has error then it's name will be added to errors with error string
* Call validate method in handleSubmit, and add errors to state accordingly
* validate method will return empty object on no errors.

- Displaying Validation Errors
* In input.jsx
After input field add div.alert.alert-danger with error conditionally
Add error to input.jsx props
* In loginForm
In Input add error={errors.username}
In handleSubmit setState set errors to empty object on null

- Validation on Change
* In handleChange do validation as
get errorMessage for input using validateProperty method
set errorMessage for input in errors if there is error
else delete key in errors for the input
* Create validateProperty method
args : input OR {name, value}
check for input name, then check it's value
then return validation message.

-----------------------
Shortcuts
1. Wrapping html with other html
Select the text > Shift+Ctrl+P > wrap with abbreviation > enter >
type tag/zen coding (div.container)
